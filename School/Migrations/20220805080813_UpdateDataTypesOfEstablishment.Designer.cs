// <auto-generated />
using System;
using ACM.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ACM.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20220805080813_UpdateDataTypesOfEstablishment")]
    partial class UpdateDataTypesOfEstablishment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ACM.Models.AccountDataModelFactory.LinkUserRole", b =>
                {
                    b.Property<Guid>("LinkUserRoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserRoleID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LinkUserRoleID");

                    b.HasIndex("UserID");

                    b.HasIndex("UserRoleID");

                    b.ToTable("LinkUserRole");
                });

            modelBuilder.Entity("ACM.Models.AccountDataModelFactory.TemporaryTokensType", b =>
                {
                    b.Property<Guid>("TemporaryTokensTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TemporaryTokensTypeID");

                    b.ToTable("TemporaryTokensType");
                });

            modelBuilder.Entity("ACM.Models.AccountDataModelFactory.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AcceptTermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<Guid?>("AcmAccessRoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CellphoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CountryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdminApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LanguageCultureID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LoginTries")
                        .HasColumnType("int");

                    b.Property<Guid?>("OrganisationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProvinceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ReceiveEmailNotification")
                        .HasColumnType("bit");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timezone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("AcmAccessRoleID");

                    b.HasIndex("CountryID");

                    b.HasIndex("LanguageCultureID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ACM.Models.AccountDataModelFactory.UserRole", b =>
                {
                    b.Property<Guid>("UserRoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserRoleID");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ACM.Models.AccountDataModelFactory.UserTemporaryToken", b =>
                {
                    b.Property<Guid>("UserTemporaryTokenID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TemporaryTokensTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TokenExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserTemporaryTokenID");

                    b.HasIndex("TemporaryTokensTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("UserTemporaryToken");
                });

            modelBuilder.Entity("ACM.Models.ACMDataModelFactory.AcmAccessRole", b =>
                {
                    b.Property<Guid>("AcmAccessRoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcmAccessRoleID");

                    b.ToTable("AcmAccessRoles");
                });

            modelBuilder.Entity("ACM.Models.ACMDataModelFactory.AcmRole", b =>
                {
                    b.Property<Guid>("AcmRoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcmRoleID");

                    b.ToTable("AcmRoles");
                });

            modelBuilder.Entity("ACM.Models.ACMDataModelFactory.LinkAcmAccessRoleAcmRole", b =>
                {
                    b.Property<Guid>("LinkAcmAccessRoleAcmRoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcmAccessRoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcmRoleID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LinkAcmAccessRoleAcmRoleID");

                    b.HasIndex("AcmAccessRoleID");

                    b.HasIndex("AcmRoleID");

                    b.ToTable("LinkAcmAccessRoleAcmRoles");
                });

            modelBuilder.Entity("ACM.Models.ACMDataModelFactory.LinkAcmAccessRoleFormDefinition", b =>
                {
                    b.Property<Guid>("LinkAcmAccessRoleFormDefinitionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcmAccessRoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormDefinitionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LinkAcmAccessRoleFormDefinitionID");

                    b.HasIndex("AcmAccessRoleID");

                    b.HasIndex("FormDefinitionID");

                    b.ToTable("LinkAcmAccessRoleFormDefinitions");
                });

            modelBuilder.Entity("ACM.Models.Auditing.AuditAccountDataModelFactory.LinkUserRoleAudit", b =>
                {
                    b.Property<Guid>("LinkUserRoleAuditID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LinkUserRoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserRoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ValidFromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LinkUserRoleAuditID");

                    b.ToTable("LinkUserRoleAudit");
                });

            modelBuilder.Entity("ACM.Models.Auditing.AuditAccountDataModelFactory.UserAudit", b =>
                {
                    b.Property<Guid>("UserAuditID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AcceptTermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<string>("CellphoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CountryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LanguageCultureID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LoginTries")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timezone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ValidFromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserAuditID");

                    b.ToTable("UserAudit");
                });

            modelBuilder.Entity("ACM.Models.EstablishmentModelFactory.Establishment", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DateCaptured")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EstablishmentDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EstablishmentName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Meters")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("Establishments");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormBuilderConditionAction", b =>
                {
                    b.Property<Guid>("FormBuilderConditionActionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormBuilderConditionActionID");

                    b.ToTable("FormBuilderConditionActions");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormBuilderFormDefinitionLibrary", b =>
                {
                    b.Property<Guid>("FormBuilderFormDefinitionLibraryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("EventCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResponse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStructure")
                        .HasColumnType("bit");

                    b.HasKey("FormBuilderFormDefinitionLibraryID");

                    b.ToTable("FormBuilderFormDefinitionLibrary");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormBuilderFormDefinitionLocationResponseType", b =>
                {
                    b.Property<Guid>("FormBuilderFormDefinitionLocationResponseTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormBuilderFormDefinitionLocationResponseTypeID");

                    b.ToTable("FormBuilderFormDefinitionLocationResponseTypes");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormBuilderFormDefinitionNumberUOM", b =>
                {
                    b.Property<Guid>("FormBuilderFormDefinitionNumberUOMID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormBuilderFormDefinitionNumberUOMID");

                    b.ToTable("FormBuilderFormDefinitionNumberUOM");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormBuilderFormDefinitionStandardResponseType", b =>
                {
                    b.Property<Guid>("FormBuilderFormDefinitionStandardResponseTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormBuilderFormDefinitionStandardResponseTypeID");

                    b.ToTable("FormBuilderFormDefinitionStandardResponseTypes");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormBuilderFormDefinitionStandardResponseTypeAnswer", b =>
                {
                    b.Property<Guid>("FormBuilderFormDefinitionStandardResponseTypeAnswerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<Guid?>("FormBuilderFormDefinitionLocationResponseTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormBuilderFormDefinitionStandardResponseTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFailure")
                        .HasColumnType("bit");

                    b.Property<double>("WeightScore")
                        .HasColumnType("float");

                    b.HasKey("FormBuilderFormDefinitionStandardResponseTypeAnswerID");

                    b.HasIndex("FormBuilderFormDefinitionLocationResponseTypeID");

                    b.ToTable("FormBuilderFormDefinitionStandardResponseTypeAnswers");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormBuilderQuestionPostSubmissionAction", b =>
                {
                    b.Property<Guid>("FormBuilderQuestionPostSubmissionActionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormBuilderQuestionPostSubmissionActionID");

                    b.ToTable("FormBuilderQuestionPostSubmissionActions");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinition", b =>
                {
                    b.Property<Guid>("FormDefinitionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowSignatures")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DynamicTemplateInstanceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DynamicTemplateInstanceIDCLInst")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("InstanceNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("InstructionsFormatted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApprovalRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocationRelevant")
                        .HasColumnType("bit");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("FormDefinitionID");

                    b.ToTable("FormDefinitions");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItem", b =>
                {
                    b.Property<Guid>("FormDefinitionItemID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChildCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ChildID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormDefinitionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Grouping")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("ParentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.HasKey("FormDefinitionItemID");

                    b.HasIndex("FormDefinitionID");

                    b.ToTable("FormDefinitionItems");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemCategory", b =>
                {
                    b.Property<Guid>("FormDefinitionItemCategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FormDefinitionItemCategoryID");

                    b.ToTable("FormDefinitionItemCategory");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemDateTime", b =>
                {
                    b.Property<Guid>("FormDefinitionItemDateTimeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowPastDates")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPastTimes")
                        .HasColumnType("bit");

                    b.Property<bool>("CaptureDate")
                        .HasColumnType("bit");

                    b.Property<bool>("CaptureTime")
                        .HasColumnType("bit");

                    b.Property<string>("CautionColour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CautionColour2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CautionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CautionDescription2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConditionFormDefinitionItemQuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConditionFormDefinitionItemQuestionResponseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormBuilderConditionActionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupingReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionImageBlobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCaution")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCondition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInstruction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.HasKey("FormDefinitionItemDateTimeID");

                    b.ToTable("FormDefinitionItemDateTimes");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemDrawing", b =>
                {
                    b.Property<Guid>("FormDefinitionItemDrawingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConditionFormDefinitionItemQuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConditionFormDefinitionItemQuestionResponseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormBuilderConditionActionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupingReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionImageBlobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCondition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInstruction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.HasKey("FormDefinitionItemDrawingID");

                    b.ToTable("FormDefinitionItemDrawings");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemDynamic", b =>
                {
                    b.Property<Guid>("FormDefinitionItemDynamicID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupingReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPredefinedItems")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepeatDynamic")
                        .HasColumnType("bit");

                    b.Property<int>("MinDynamicRepeat")
                        .HasColumnType("int");

                    b.Property<string>("NameOfItemRepeat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormDefinitionItemDynamicID");

                    b.ToTable("FormDefinitionItemDynamic");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemDynamicResponse", b =>
                {
                    b.Property<Guid>("FormDefinitionItemDynamicResponseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("FormDefinitionItemDynamicID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FormDefinitionItemDynamicResponseID");

                    b.HasIndex("FormDefinitionItemDynamicID");

                    b.ToTable("FormDefinitionItemDynamicResponses");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemInformation", b =>
                {
                    b.Property<Guid>("FormDefinitionItemInformationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConditionFormDefinitionItemQuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConditionFormDefinitionItemQuestionResponseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormBuilderConditionActionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InstructionImageBlobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCondition")
                        .HasColumnType("bit");

                    b.HasKey("FormDefinitionItemInformationID");

                    b.ToTable("FormDefinitionItemInformations");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemLocation", b =>
                {
                    b.Property<Guid>("FormDefinitionItemLocationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConditionFormDefinitionItemQuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConditionFormDefinitionItemQuestionResponseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormBuilderConditionActionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FormBuilderFormDefinitionLocationResponseTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupingReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionImageBlobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCondition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInstruction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocationList")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTextInput")
                        .HasColumnType("bit");

                    b.HasKey("FormDefinitionItemLocationID");

                    b.ToTable("FormDefinitionItemLocations");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemLocationResponse", b =>
                {
                    b.Property<Guid>("FormDefinitionItemLocationResponseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("FormDefinitionItemLocationID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FormDefinitionItemLocationResponseID");

                    b.HasIndex("FormDefinitionItemLocationID");

                    b.ToTable("FormDefinitionItemLocationResponses");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemNumber", b =>
                {
                    b.Property<Guid>("FormDefinitionItemNumberID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CautionColour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CautionColour2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CautionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CautionDescription2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConditionFormDefinitionItemQuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConditionFormDefinitionItemQuestionResponseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DisplayPreviousMeasurement")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormBuilderConditionActionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupingReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionImageBlobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCaution")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCondition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInstruction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemMeasurement")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTolerance")
                        .HasColumnType("bit");

                    b.Property<string>("MeasureIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToleranceExceededPrompt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ToleranceRangeFrom")
                        .HasColumnType("float");

                    b.Property<double>("ToleranceRangeTo")
                        .HasColumnType("float");

                    b.Property<string>("TolleranceComparisonOperator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitOfMeasure")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormDefinitionItemNumberID");

                    b.ToTable("FormDefinitionItemNumbers");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemPicture", b =>
                {
                    b.Property<Guid>("FormDefinitionItemPictureID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowMultipleUploads")
                        .HasColumnType("bit");

                    b.Property<Guid>("ConditionFormDefinitionItemQuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConditionFormDefinitionItemQuestionResponseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormBuilderConditionActionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupingReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionImageBlobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCondition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInstruction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.HasKey("FormDefinitionItemPictureID");

                    b.ToTable("FormDefinitionItemPictures");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemPostSubmissionAction", b =>
                {
                    b.Property<Guid>("FormDefinitionItemPostSubmissionActionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BasicFieldEventCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FormBuilderQuestionPostSubmissionActionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormDefinitionItemID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FormDefinitionItemPostSubmissionActionID");

                    b.HasIndex("FormBuilderQuestionPostSubmissionActionID");

                    b.HasIndex("FormDefinitionItemID");

                    b.ToTable("FormDefinitionItemPostSubmissionActions");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemQuestion", b =>
                {
                    b.Property<Guid>("FormDefinitionItemQuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CautionColour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CautionColour2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CautionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CautionDescription2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConditionFormDefinitionItemQuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConditionFormDefinitionItemQuestionResponseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormBuilderConditionActionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FormBuilderFormDefinitionStandardResponseTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupingReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionImageBlobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCaution")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCondition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInstruction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsList")
                        .HasColumnType("bit");

                    b.Property<bool>("IsListMultiSelect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotify")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRiskRating")
                        .HasColumnType("bit");

                    b.Property<Guid>("NotificationAnswerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NotificationEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ScoringWeight")
                        .HasColumnType("float");

                    b.HasKey("FormDefinitionItemQuestionID");

                    b.ToTable("FormDefinitionItemQuestions");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemQuestionResponse", b =>
                {
                    b.Property<Guid>("FormDefinitionItemQuestionResponseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("FormDefinitionItemQuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFailure")
                        .HasColumnType("bit");

                    b.Property<double>("WeightScore")
                        .HasColumnType("float");

                    b.HasKey("FormDefinitionItemQuestionResponseID");

                    b.HasIndex("FormDefinitionItemQuestionID");

                    b.ToTable("FormDefinitionItemQuestionResponses");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemSection", b =>
                {
                    b.Property<Guid>("FormDefinitionItemSectionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FormDefinitionItemSectionID");

                    b.ToTable("FormDefinitionItemSections");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemSignature", b =>
                {
                    b.Property<Guid>("FormDefinitionItemSignatureID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConditionFormDefinitionItemQuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConditionFormDefinitionItemQuestionResponseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormBuilderConditionActionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupingReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionImageBlobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCondition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInstruction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.HasKey("FormDefinitionItemSignatureID");

                    b.ToTable("FormDefinitionItemSignatures");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemSlider", b =>
                {
                    b.Property<Guid>("FormDefinitionItemSliderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CautionColour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CautionColour2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CautionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CautionDescription2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConditionFormDefinitionItemQuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConditionFormDefinitionItemQuestionResponseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormBuilderConditionActionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupingReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Increments")
                        .HasColumnType("float");

                    b.Property<string>("InstructionImageBlobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCaution")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCondition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInstruction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRiskRating")
                        .HasColumnType("bit");

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<int>("MinValue")
                        .HasColumnType("int");

                    b.HasKey("FormDefinitionItemSliderID");

                    b.ToTable("FormDefinitionItemSliders");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemText", b =>
                {
                    b.Property<Guid>("FormDefinitionItemTextID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConditionFormDefinitionItemQuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConditionFormDefinitionItemQuestionResponseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormBuilderConditionActionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupingReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionImageBlobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCondition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInstruction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultiline")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonLookupField")
                        .HasColumnType("bit");

                    b.HasKey("FormDefinitionItemTextID");

                    b.ToTable("FormDefinitionItemText");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstance", b =>
                {
                    b.Property<Guid>("FormInstanceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovedBySignatureBlobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ApprovedByUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApprovedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FBItemsAnswered")
                        .HasColumnType("int");

                    b.Property<int?>("FBItemsInOrder")
                        .HasColumnType("int");

                    b.Property<int?>("FBItemsNotInOrder")
                        .HasColumnType("int");

                    b.Property<int?>("FBItemsTotal")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FormCaptureEndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FormCaptureStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FormDefinitionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FormExecutionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FormInstanceStateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GPSLocationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("InstanceNumber")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormInstanceID");

                    b.HasIndex("CreatedUserID");

                    b.HasIndex("FormDefinitionID");

                    b.HasIndex("FormInstanceStateID");

                    b.HasIndex("GPSLocationID");

                    b.ToTable("FormInstances");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItem", b =>
                {
                    b.Property<Guid>("FormInstanceItemID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChildCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("FBIsAnswered")
                        .HasColumnType("bit");

                    b.Property<bool>("FBIsInOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("FBIsNotInOrder")
                        .HasColumnType("bit");

                    b.Property<Guid?>("FormDefinitionItemID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormInstanceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FormInstanceItemDynamicID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormInstanceItemID");

                    b.HasIndex("FormDefinitionItemID");

                    b.HasIndex("FormInstanceID");

                    b.ToTable("FormInstanceItems");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemDateTime", b =>
                {
                    b.Property<Guid>("FormInstanceItemDateTimeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DateValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FormInstanceItemID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TimeValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormInstanceItemDateTimeID");

                    b.HasIndex("FormInstanceItemID");

                    b.ToTable("FormInstanceItemDateTime");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemDrawing", b =>
                {
                    b.Property<Guid>("FormInstanceItemDrawingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FormInstanceItemID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SerializedPoints")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormInstanceItemDrawingID");

                    b.HasIndex("FormInstanceItemID");

                    b.ToTable("FormInstanceItemDrawings");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemDynamic", b =>
                {
                    b.Property<Guid>("FormInstanceItemDynamicID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<Guid?>("FormDefinitionItemDynamicResponseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormInstanceItemID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FormInstanceItemID1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormInstanceItemDynamicID");

                    b.HasIndex("FormInstanceItemID1");

                    b.ToTable("FormInstanceItemDynamic");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemLocation", b =>
                {
                    b.Property<Guid>("FormInstanceItemLocationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FormDefinitionItemLocationResponseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormInstanceItemID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocationText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormInstanceItemLocationID");

                    b.HasIndex("FormInstanceItemID");

                    b.ToTable("FormInstanceItemLocations");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemNumber", b =>
                {
                    b.Property<Guid>("FormInstanceItemNumberID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormInstanceItemID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("NumberValue")
                        .HasColumnType("float");

                    b.HasKey("FormInstanceItemNumberID");

                    b.HasIndex("FormInstanceItemID");

                    b.ToTable("FormInstanceItemNumbers");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemPicture", b =>
                {
                    b.Property<Guid>("FormInstanceItemPictureID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FormInstanceItemID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FormInstanceItemPictureID");

                    b.HasIndex("FormInstanceItemID");

                    b.ToTable("FormInstanceItemPictures");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemQuestion", b =>
                {
                    b.Property<Guid>("FormInstanceItemQuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormDefinitionItemQuestionResponseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormInstanceItemID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FormInstanceItemQuestionID");

                    b.HasIndex("FormInstanceItemID");

                    b.ToTable("FormInstanceItemQuestions");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemSignature", b =>
                {
                    b.Property<Guid>("FormInstanceItemSignatureID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FormInstanceItemID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FormInstanceItemSignatureID");

                    b.HasIndex("FormInstanceItemID");

                    b.ToTable("FormInstanceItemSignatures");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemSlider", b =>
                {
                    b.Property<Guid>("FormInstanceItemSliderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormInstanceItemID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("SliderValue")
                        .HasColumnType("float");

                    b.HasKey("FormInstanceItemSliderID");

                    b.HasIndex("FormInstanceItemID");

                    b.ToTable("FormInstanceItemSliders");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemSupportingDocument", b =>
                {
                    b.Property<Guid>("FormInstanceItemSupportingDocumentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FormInstanceItemID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FormInstanceItemSupportingDocumentID");

                    b.HasIndex("FormInstanceItemID");

                    b.ToTable("FormInstanceItemSupportingDocuments");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemText", b =>
                {
                    b.Property<Guid>("FormInstanceItemTextID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormInstanceItemID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TextValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormInstanceItemTextID");

                    b.HasIndex("FormInstanceItemID");

                    b.ToTable("FormInstanceItemTexts");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceState", b =>
                {
                    b.Property<Guid>("FormInstanceStateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormInstanceStateID");

                    b.ToTable("FormInstanceStates");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.GPSLocation", b =>
                {
                    b.Property<Guid>("GPSLocationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Accuracy")
                        .HasColumnType("float");

                    b.Property<double>("Altitude")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GPSLocationID");

                    b.ToTable("GPSLocations");
                });

            modelBuilder.Entity("ACM.Models.Organisation", b =>
                {
                    b.Property<Guid>("OrganisationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Meters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganisationAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganisationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganisationID");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("ACM.Models.ProductsModelFactory.Products", b =>
                {
                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Createdby")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ACM.Models.SystemModelFactory.ApplicationLog", b =>
                {
                    b.Property<Guid>("ApplicationLogID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogOriginator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationLogID");

                    b.HasIndex("UserID");

                    b.ToTable("ApplicationLog");
                });

            modelBuilder.Entity("ACM.Models.SystemModelFactory.Country", b =>
                {
                    b.Property<Guid>("CountryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CallingCodePrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IDNumberValidationLength")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("IsoAlpha2Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsoAlpha3Code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ACM.Models.SystemModelFactory.EmailTemplate", b =>
                {
                    b.Property<Guid>("EmailTemplateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SMSTemplateBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateBodyTags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmailTemplateID");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("ACM.Models.SystemModelFactory.Ethnicity", b =>
                {
                    b.Property<Guid>("EthnicityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EthnicityID");

                    b.ToTable("Ethnicities");
                });

            modelBuilder.Entity("ACM.Models.SystemModelFactory.FAQ", b =>
                {
                    b.Property<Guid>("FAQID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Catergory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FAQID");

                    b.ToTable("FAQ");
                });

            modelBuilder.Entity("ACM.Models.SystemModelFactory.Gender", b =>
                {
                    b.Property<Guid>("GenderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderID");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("ACM.Models.SystemModelFactory.LanguageCulture", b =>
                {
                    b.Property<Guid>("LanguageCultureID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CultureNameCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageCultureID");

                    b.ToTable("LanguageCultures");
                });

            modelBuilder.Entity("ACM.Models.SystemModelFactory.LocalizationValue", b =>
                {
                    b.Property<Guid>("LocalizationValueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KeyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LanguageCultureID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocalizationValueID");

                    b.HasIndex("LanguageCultureID");

                    b.ToTable("LocalizationValues");
                });

            modelBuilder.Entity("ACM.Models.SystemModelFactory.Province", b =>
                {
                    b.Property<Guid>("ProvinceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvIsoCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceID");

                    b.HasIndex("CountryID");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("ACM.Models.SystemModelFactory.SystemConfiguration", b =>
                {
                    b.Property<Guid>("SystemConfigurationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConfigValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SystemConfigurationID");

                    b.ToTable("SystemConfiguration");
                });

            modelBuilder.Entity("ACM.Models.UserModelFactory.CalendarEvent", b =>
                {
                    b.Property<Guid>("CalendarEventID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CalendarEventTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("EnableReminder")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAllDay")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CalendarEventID");

                    b.HasIndex("CalendarEventTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("CalendarEvents");
                });

            modelBuilder.Entity("ACM.Models.UserModelFactory.CalendarEventMetaFieldValue", b =>
                {
                    b.Property<Guid>("CalendarEventMetaFieldValueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CalendarEventID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CalendarEventTypeMetaFieldID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MetaValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CalendarEventMetaFieldValueID");

                    b.HasIndex("CalendarEventID");

                    b.HasIndex("CalendarEventTypeMetaFieldID");

                    b.ToTable("CalendarEventMetaFieldValues");
                });

            modelBuilder.Entity("ACM.Models.UserModelFactory.CalendarEventType", b =>
                {
                    b.Property<Guid>("CalendarEventTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CalendarEventTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("CalendarEventTypes");
                });

            modelBuilder.Entity("ACM.Models.UserModelFactory.CalendarEventTypeMetaField", b =>
                {
                    b.Property<Guid>("CalendarEventTypeMetaFieldID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CalendarEventTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CalendarEventTypeMetaFieldID");

                    b.HasIndex("CalendarEventTypeID");

                    b.ToTable("CalendarEventTypeMetaField");
                });

            modelBuilder.Entity("ACM.Models.UserModelFactory.UserInAppNotification", b =>
                {
                    b.Property<Guid>("UserInAppNotificationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ActionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EditDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EditUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OrganisationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserInAppNotificationID");

                    b.HasIndex("UserID");

                    b.ToTable("UserInAppNotifications");
                });

            modelBuilder.Entity("ACM.Models.UserModelFactory.UserPaymentTransaction", b =>
                {
                    b.Property<Guid>("UserPaymentTransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AmountFee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmountGross")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmountNet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PFPaymentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PFPaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PFReferenceID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentRefID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserPaymentTransactionID");

                    b.ToTable("UserPaymentTransactions");
                });

            modelBuilder.Entity("ACM.Models.VoucherModelFactory.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CapturedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VoucherCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherPlan")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("ACM.Models.AccountDataModelFactory.LinkUserRole", b =>
                {
                    b.HasOne("ACM.Models.AccountDataModelFactory.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACM.Models.AccountDataModelFactory.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("ACM.Models.AccountDataModelFactory.User", b =>
                {
                    b.HasOne("ACM.Models.ACMDataModelFactory.AcmAccessRole", "AcmAccessRole")
                        .WithMany()
                        .HasForeignKey("AcmAccessRoleID");

                    b.HasOne("ACM.Models.SystemModelFactory.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.HasOne("ACM.Models.SystemModelFactory.LanguageCulture", "LanguageCulture")
                        .WithMany()
                        .HasForeignKey("LanguageCultureID");

                    b.HasOne("ACM.Models.SystemModelFactory.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID");

                    b.Navigation("AcmAccessRole");

                    b.Navigation("Country");

                    b.Navigation("LanguageCulture");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("ACM.Models.AccountDataModelFactory.UserTemporaryToken", b =>
                {
                    b.HasOne("ACM.Models.AccountDataModelFactory.TemporaryTokensType", "TemporaryTokensType")
                        .WithMany()
                        .HasForeignKey("TemporaryTokensTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACM.Models.AccountDataModelFactory.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TemporaryTokensType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ACM.Models.ACMDataModelFactory.LinkAcmAccessRoleAcmRole", b =>
                {
                    b.HasOne("ACM.Models.ACMDataModelFactory.AcmAccessRole", "AcmAccessRole")
                        .WithMany()
                        .HasForeignKey("AcmAccessRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACM.Models.ACMDataModelFactory.AcmRole", "AcmRole")
                        .WithMany()
                        .HasForeignKey("AcmRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcmAccessRole");

                    b.Navigation("AcmRole");
                });

            modelBuilder.Entity("ACM.Models.ACMDataModelFactory.LinkAcmAccessRoleFormDefinition", b =>
                {
                    b.HasOne("ACM.Models.ACMDataModelFactory.AcmAccessRole", "AcmAccessRole")
                        .WithMany()
                        .HasForeignKey("AcmAccessRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACM.Models.FormDataModelFactory.FormDefinition", "FormDefinition")
                        .WithMany()
                        .HasForeignKey("FormDefinitionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcmAccessRole");

                    b.Navigation("FormDefinition");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormBuilderFormDefinitionStandardResponseTypeAnswer", b =>
                {
                    b.HasOne("ACM.Models.FormDataModelFactory.FormBuilderFormDefinitionLocationResponseType", "FormBuilderFormDefinitionLocationResponseType")
                        .WithMany()
                        .HasForeignKey("FormBuilderFormDefinitionLocationResponseTypeID");

                    b.Navigation("FormBuilderFormDefinitionLocationResponseType");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItem", b =>
                {
                    b.HasOne("ACM.Models.FormDataModelFactory.FormDefinition", "FormDefinition")
                        .WithMany()
                        .HasForeignKey("FormDefinitionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormDefinition");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemDynamicResponse", b =>
                {
                    b.HasOne("ACM.Models.FormDataModelFactory.FormDefinitionItemDynamic", "FormDefinitionItemDynamic")
                        .WithMany()
                        .HasForeignKey("FormDefinitionItemDynamicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormDefinitionItemDynamic");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemLocationResponse", b =>
                {
                    b.HasOne("ACM.Models.FormDataModelFactory.FormDefinitionItemLocation", "FormDefinitionItemLocation")
                        .WithMany()
                        .HasForeignKey("FormDefinitionItemLocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormDefinitionItemLocation");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemPostSubmissionAction", b =>
                {
                    b.HasOne("ACM.Models.FormDataModelFactory.FormBuilderQuestionPostSubmissionAction", "FormBuilderQuestionPostSubmissionAction")
                        .WithMany()
                        .HasForeignKey("FormBuilderQuestionPostSubmissionActionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACM.Models.FormDataModelFactory.FormDefinitionItem", "FormDefinitionItem")
                        .WithMany()
                        .HasForeignKey("FormDefinitionItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormBuilderQuestionPostSubmissionAction");

                    b.Navigation("FormDefinitionItem");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormDefinitionItemQuestionResponse", b =>
                {
                    b.HasOne("ACM.Models.FormDataModelFactory.FormDefinitionItemQuestion", "FormDefinitionItemQuestion")
                        .WithMany()
                        .HasForeignKey("FormDefinitionItemQuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormDefinitionItemQuestion");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstance", b =>
                {
                    b.HasOne("ACM.Models.AccountDataModelFactory.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACM.Models.FormDataModelFactory.FormDefinition", "FormDefinition")
                        .WithMany()
                        .HasForeignKey("FormDefinitionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACM.Models.FormDataModelFactory.FormInstanceState", "FormInstanceState")
                        .WithMany()
                        .HasForeignKey("FormInstanceStateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACM.Models.FormDataModelFactory.GPSLocation", "GPSLocation")
                        .WithMany()
                        .HasForeignKey("GPSLocationID");

                    b.Navigation("CreatedUser");

                    b.Navigation("FormDefinition");

                    b.Navigation("FormInstanceState");

                    b.Navigation("GPSLocation");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItem", b =>
                {
                    b.HasOne("ACM.Models.FormDataModelFactory.FormDefinitionItem", "FormDefinitionItem")
                        .WithMany()
                        .HasForeignKey("FormDefinitionItemID");

                    b.HasOne("ACM.Models.FormDataModelFactory.FormInstance", "FormInstance")
                        .WithMany()
                        .HasForeignKey("FormInstanceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormDefinitionItem");

                    b.Navigation("FormInstance");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemDateTime", b =>
                {
                    b.HasOne("ACM.Models.FormDataModelFactory.FormInstanceItem", "FormInstanceItem")
                        .WithMany()
                        .HasForeignKey("FormInstanceItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormInstanceItem");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemDrawing", b =>
                {
                    b.HasOne("ACM.Models.FormDataModelFactory.FormInstanceItem", "FormInstanceItem")
                        .WithMany()
                        .HasForeignKey("FormInstanceItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormInstanceItem");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemDynamic", b =>
                {
                    b.HasOne("ACM.Models.FormDataModelFactory.FormInstanceItem", "FormInstanceItem")
                        .WithMany()
                        .HasForeignKey("FormInstanceItemID1");

                    b.Navigation("FormInstanceItem");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemLocation", b =>
                {
                    b.HasOne("ACM.Models.FormDataModelFactory.FormInstanceItem", "FormInstanceItem")
                        .WithMany()
                        .HasForeignKey("FormInstanceItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormInstanceItem");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemNumber", b =>
                {
                    b.HasOne("ACM.Models.FormDataModelFactory.FormInstanceItem", "FormInstanceItem")
                        .WithMany()
                        .HasForeignKey("FormInstanceItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormInstanceItem");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemPicture", b =>
                {
                    b.HasOne("ACM.Models.FormDataModelFactory.FormInstanceItem", "FormInstanceItem")
                        .WithMany()
                        .HasForeignKey("FormInstanceItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormInstanceItem");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemQuestion", b =>
                {
                    b.HasOne("ACM.Models.FormDataModelFactory.FormInstanceItem", "FormInstanceItem")
                        .WithMany()
                        .HasForeignKey("FormInstanceItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormInstanceItem");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemSignature", b =>
                {
                    b.HasOne("ACM.Models.FormDataModelFactory.FormInstanceItem", "FormInstanceItem")
                        .WithMany()
                        .HasForeignKey("FormInstanceItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormInstanceItem");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemSlider", b =>
                {
                    b.HasOne("ACM.Models.FormDataModelFactory.FormInstanceItem", "FormInstanceItem")
                        .WithMany()
                        .HasForeignKey("FormInstanceItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormInstanceItem");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemSupportingDocument", b =>
                {
                    b.HasOne("ACM.Models.FormDataModelFactory.FormInstanceItem", "FormInstanceItem")
                        .WithMany()
                        .HasForeignKey("FormInstanceItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormInstanceItem");
                });

            modelBuilder.Entity("ACM.Models.FormDataModelFactory.FormInstanceItemText", b =>
                {
                    b.HasOne("ACM.Models.FormDataModelFactory.FormInstanceItem", "FormInstanceItem")
                        .WithMany()
                        .HasForeignKey("FormInstanceItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormInstanceItem");
                });

            modelBuilder.Entity("ACM.Models.SystemModelFactory.ApplicationLog", b =>
                {
                    b.HasOne("ACM.Models.AccountDataModelFactory.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ACM.Models.SystemModelFactory.LocalizationValue", b =>
                {
                    b.HasOne("ACM.Models.SystemModelFactory.LanguageCulture", "LanguageCulture")
                        .WithMany()
                        .HasForeignKey("LanguageCultureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguageCulture");
                });

            modelBuilder.Entity("ACM.Models.SystemModelFactory.Province", b =>
                {
                    b.HasOne("ACM.Models.SystemModelFactory.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ACM.Models.UserModelFactory.CalendarEvent", b =>
                {
                    b.HasOne("ACM.Models.UserModelFactory.CalendarEventType", "CalendarEventType")
                        .WithMany()
                        .HasForeignKey("CalendarEventTypeID");

                    b.HasOne("ACM.Models.AccountDataModelFactory.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalendarEventType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ACM.Models.UserModelFactory.CalendarEventMetaFieldValue", b =>
                {
                    b.HasOne("ACM.Models.UserModelFactory.CalendarEvent", "CalendarEvent")
                        .WithMany()
                        .HasForeignKey("CalendarEventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACM.Models.UserModelFactory.CalendarEventTypeMetaField", "CalendarEventTypeMetaField")
                        .WithMany()
                        .HasForeignKey("CalendarEventTypeMetaFieldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalendarEvent");

                    b.Navigation("CalendarEventTypeMetaField");
                });

            modelBuilder.Entity("ACM.Models.UserModelFactory.CalendarEventType", b =>
                {
                    b.HasOne("ACM.Models.AccountDataModelFactory.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ACM.Models.UserModelFactory.CalendarEventTypeMetaField", b =>
                {
                    b.HasOne("ACM.Models.UserModelFactory.CalendarEventType", "CalendarEventType")
                        .WithMany()
                        .HasForeignKey("CalendarEventTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalendarEventType");
                });

            modelBuilder.Entity("ACM.Models.UserModelFactory.UserInAppNotification", b =>
                {
                    b.HasOne("ACM.Models.AccountDataModelFactory.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
